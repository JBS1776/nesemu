#include "doctest.h"
#include "testing.h"
#include "../includes/cpu.h"
#include "../includes/bus.h"
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

TEST_CASE("CPU testing Non-Input") {
	Cpu cpu = Cpu();
	SUBCASE("Small test") {
		cpu.bus.writeRam8(0x600, 0xa9); // LDA #$69
		cpu.bus.writeRam8(0x601, 0x69);
		cpu.bus.writeRam8(0x602, 0x8d); // STA $6000
		cpu.bus.writeRam16(0x603, 0x6000);
		cpu.bus.writeRam8(0x605, 0xa9); // LDA #$0
		cpu.bus.writeRam8(0x606, 0);
		cpu.bus.writeRam8(0x607, 0xad); // LDA $6000
		cpu.bus.writeRam16(0x608, 0x6000);
		cpu.bus.writeRam8(0x60a, 0); //BRK
		cpu.bus.writeRam16(0x6000, 0x6000);
		cpu.bus.writeRam16(0xfffc, 0x600);
		cpu.pc = cpu.bus.readRam16(0xfffc);
		cpu.executeIns();
		CHECK(cpu.pc == 0x602);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.S == 0b00100000);
		CHECK(cpu.A == 0x69);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == 2);
		cpu.executeIns();
		CHECK(cpu.pc == 0x605);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.S == 0b00100000);
		CHECK(cpu.A == 0x69);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == 6);
		cpu.executeIns();
		CHECK(cpu.pc == 0x607);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.S == 0b00100010);
		CHECK(cpu.A == 0);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == 8);
		cpu.executeIns();
		CHECK(cpu.pc == 0x60a);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.S == 0b00100000);
		CHECK(cpu.A == 0x69);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == 12);
		cpu.executeIns();
		CHECK(cpu.pc == 0);
		CHECK(cpu.sp == 0xfc);
		CHECK(cpu.S == 0b00110100);
		CHECK(cpu.A == 0x69);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == 19);
	}
	SUBCASE("Math") {
		cpu.bus.writeRam8(0x6, 0x43);
		cpu.bus.writeRam8(0xc1, 0xaa);
		cpu.bus.writeRam8(0xc123, 0xaa);
		cpu.bus.writeRam8(0xabcd, 0xe1);
		cpu.bus.writeRam8(0x8154, 0x94);
		cpu.bus.writeRam16(0x4, 0xc123);
		cpu.bus.writeRam8(0x9001, 0xcf);
		cpu.bus.writeRam16(0xfffc, 0x8000);
		cpu.bus.writeRam8(0x8000, 0x18); // CLC 2 cycles, A=0, X=0, Y=0, sp=0xff, S=0b00100000
		cpu.bus.writeRam8(0x8001, 0xa2); // LDX #$16 2 cycles, X=0x16
		cpu.bus.writeRam8(0x8002, 0x16);
		cpu.bus.writeRam8(0x8003, 0xa9); // LDA #$27 2 cycles, A=0x27
		cpu.bus.writeRam8(0x8004, 0x27);
		cpu.bus.writeRam8(0x8005, 0x75); // ADC $f0,X 4 cycles, A=0x6a
		cpu.bus.writeRam8(0x8006, 0xf0);
		cpu.bus.writeRam8(0x8007, 0xbc); // LDY $0xc10d,X 4 cycles, Y = 0xaa
		cpu.bus.writeRam16(0x8008, 0xc10d);
		cpu.bus.writeRam8(0x800a, 0x31); // AND ($c1),Y 5 cycles, A=0x40
		cpu.bus.writeRam8(0x800b, 0xc1);
		cpu.bus.writeRam8(0x800c, 0x6); // ASL $06 5 cycles, A=0x40
		cpu.bus.writeRam8(0x800d, 0x6);
		cpu.bus.writeRam8(0x800e, 0xa9); // LDA $#43 2 cycles, A=0x43
		cpu.bus.writeRam8(0x800f, 0x43);
		cpu.bus.writeRam8(0x8010, 0xa); // ASL A 2 cycles, A=0x86
		cpu.bus.writeRam8(0x8011, 0x4c); // JMP $80b1 3 cycles
		cpu.bus.writeRam16(0x8012, 0x80b1);
		cpu.bus.writeRam8(0x80b1, 0x30); // BMI #$5c (passed) 4 cycles(pagecross) (includes +1 for passed +1 for pagecross)
		cpu.bus.writeRam8(0x80b2, 0x5c);
		cpu.bus.writeRam8(0x810e, 0xb8); // CLV 2 cycles
		cpu.bus.writeRam8(0x810f, 0x59); // EOR $ab23,Y 4 cycles A=0x67
		cpu.bus.writeRam16(0x8110, 0xab23);
		cpu.bus.writeRam8(0x8112, 0xe8); // INX 2 cycles X=0x17
		cpu.bus.writeRam8(0x8113, 0x56); // LSR $ef,X 6 cycles
		cpu.bus.writeRam8(0x8114, 0xef);
		cpu.bus.writeRam8(0x8115, 0x1); // ORA ($ed),X 6 cycles A = 0x67
		cpu.bus.writeRam8(0x8116, 0xed);
		cpu.bus.writeRam8(0x8117, 0x38); // SEC 2 cycles
		cpu.bus.writeRam8(0x8118, 0xf9); // SBC $8f57,Y 5 cycles(pageCrossed) A = 0x98
		cpu.bus.writeRam16(0x8119, 0x8f57);
		cpu.pc = cpu.bus.readRam16(0xfffc);
		//printf("INIT %x\n", cpu.pc);
		uint64_t cycles = 0;
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8001);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0);
		CHECK(cpu.X == 0);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8003);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8005);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x27);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 4;
		CHECK(cpu.pc == 0x8007);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x6a);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 4;
		CHECK(cpu.pc == 0x800a);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x6a);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		cpu.executeIns();
		cycles += 6;
		CHECK(cpu.pc == 0x800c);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x40);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 5;
		CHECK(cpu.pc == 0x800e);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x40);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		CHECK(cpu.bus.readRam8(0x6) == 0x43 << 1);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8010);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x43);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8011);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x86);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		cpu.executeIns();
		cycles += 3;
		CHECK(cpu.pc == 0x80b1);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x86);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		cpu.executeIns();
		cycles += 4;
		CHECK(cpu.pc == 0x810e);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x86);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x810f);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x86);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b10100000);
		cpu.executeIns();
		cycles += 4;
		CHECK(cpu.pc == 0x8112);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x67);
		CHECK(cpu.X == 0x16);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8113);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x67);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 6;
		CHECK(cpu.pc == 0x8115);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x67);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 6;
		CHECK(cpu.pc == 0x8117);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x67);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100000);
		cpu.executeIns();
		cycles += 2;
		CHECK(cpu.pc == 0x8118);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x67);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b00100001);
		cpu.executeIns();
		cycles += 5;
		CHECK(cpu.pc == 0x811b);
		CHECK(cpu.sp == 0xff);
		CHECK(cpu.A == 0x98);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b11100000);
		cpu.executeIns();
		cycles += 7;
		CHECK(cpu.pc == 0);
		CHECK(cpu.sp == 0xfc);
		CHECK(cpu.A == 0x98);
		CHECK(cpu.X == 0x17);
		CHECK(cpu.Y == 0xaa);
		CHECK(cpu.cyclecount == cycles);
		CHECK(cpu.S == 0b11110100);
	}
	SUBCASE("Another small test") {
		uint16_t valsToWrite[8] = {0xa910, 0x8520, 0xa901, 0x6520, 0x8521, 0xe621,
			0xa421, 0xc800};
		for (int i = 0; i < 16; i+=2) {
			cpu.bus.writeRam16(i, valsToWrite[i >> 1]);
		}
		cpu.pc = 0;
		cpu.executeIns();
		CHECK(cpu.A == 0x10);
		CHECK(cpu.pc == 2);
	}
}

TEST_CASE("test.txt") {
	Cpu cpu = Cpu("testing/test.txt");
	cpu.executeIns();
	CHECK(cpu.pc == 0x602);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 2);
	cpu.executeIns();
	CHECK(cpu.pc == 0x603);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 4);
	cpu.executeIns();
	CHECK(cpu.pc == 0x605);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0x10);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 6);
	cpu.executeIns();
	CHECK(cpu.pc == 0x606);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100001);
	CHECK(cpu.A == 0x10);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 8);
	cpu.executeIns();
	CHECK(cpu.pc == 0x608);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100010);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 11);
	cpu.executeIns();
	CHECK(cpu.pc == 0x609);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100010);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 13);
	cpu.executeIns();
	CHECK(cpu.pc == 0x60b);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0x13);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 15);
	cpu.executeIns();
	CHECK(cpu.pc == 0x60c);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100001);
	CHECK(cpu.A == 0x13);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 17);
	cpu.executeIns();
	CHECK(cpu.pc == 0x60e);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100000);
	CHECK(cpu.A == 0x8e);
	CHECK(cpu.X == 0);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 19);
	cpu.executeIns();
	CHECK(cpu.pc == 0x610);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100000);
	CHECK(cpu.A == 0x8e);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 21);
	cpu.executeIns();
	CHECK(cpu.pc == 0x612);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100000);
	CHECK(cpu.A == 0xbe);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 25);
	cpu.executeIns();
	CHECK(cpu.pc == 0x9080);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100000);
	CHECK(cpu.A == 0xbe);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0);
	CHECK(cpu.cyclecount == 30);
	cpu.executeIns();
	CHECK(cpu.pc == 0x9082);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b01100000);
	CHECK(cpu.A == 0xbe);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 32);
	cpu.executeIns();
	CHECK(cpu.pc == 0x9085);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 36);
	cpu.executeIns();
	CHECK(cpu.pc == 0x615);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 39);
	cpu.executeIns();
	CHECK(cpu.pc == 0x626);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 42);
	cpu.executeIns();
	CHECK(cpu.pc == 0x5fb);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 46);
	cpu.executeIns();
	CHECK(cpu.pc == 0x5fd);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 48);
	cpu.executeIns();
	CHECK(cpu.pc == 0x57e);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100000);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 51);
	cpu.executeIns();
	CHECK(cpu.pc == 0x580);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100011);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 57);
	cpu.executeIns();
	CHECK(cpu.pc == 0x582);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100011);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 63);
	cpu.executeIns();
	CHECK(cpu.pc == 0x585);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100001);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 67);
	cpu.executeIns();
	CHECK(cpu.pc == 0x586);
	CHECK(cpu.sp == 0xfe);
	CHECK(cpu.S == 0b10100001);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 70);
	cpu.executeIns();
	CHECK(cpu.pc == 0x588);
	CHECK(cpu.sp == 0xfe);
	CHECK(cpu.S == 0b00100011);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 73);
	cpu.executeIns();
	CHECK(cpu.pc == 0x589);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b10100001);
	CHECK(cpu.A == 0xf6);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 77);
	cpu.executeIns();
	CHECK(cpu.pc == 0x58a);
	CHECK(cpu.sp == 0x0);
	CHECK(cpu.S == 0b00100011);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 81);
	cpu.executeIns();
	CHECK(cpu.pc == 0x58b);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100011);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 84);
	cpu.executeIns();
	CHECK(cpu.pc == 0x58d);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100011);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 87);
	cpu.executeIns();
	CHECK(cpu.pc == 0x58e);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b11100010);
	CHECK(cpu.A == 0);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 89);
	cpu.executeIns();
	CHECK(cpu.pc == 0x591);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0x33);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 93);
	cpu.executeIns();
	CHECK(cpu.pc == 0x540);
	CHECK(cpu.sp == 0xfd);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0x33);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 99);
	cpu.executeIns();
	CHECK(cpu.pc == 0x594);
	CHECK(cpu.sp == 0xff);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.A == 0x33);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 105);
	cpu.executeIns();
	CHECK(cpu.pc == 0);
	CHECK(cpu.sp == 0xfc);
	CHECK(cpu.S == 0b00110100);
	CHECK(cpu.A == 0x33);
	CHECK(cpu.X == 0xf1);
	CHECK(cpu.Y == 0xb);
	CHECK(cpu.cyclecount == 112);
}

TEST_CASE("SNAKE") {
	Cpu cpu = Cpu("testing/test2");
	int cycles = 0;
	int stkoffset = 0x100;
	int stkp = 0xff;
	int currPc = 0x600;
	CHECK(cpu.bus.readRam16(0xfffc) == 0x600);
	cpu.executeIns();
	cycles += 6;
	stkp -= 2;
	currPc += 6;
	CHECK(cpu.pc == currPc);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.sp == stkp);
	CHECK(cpu.bus.readRam16(stkp + stkoffset + 1) == 0x602);
	cpu.executeIns();
	cycles += 6;
	stkp -= 2;
	CHECK((cpu.pc == cpu.bus.readRam16(0x607) && cpu.pc == 0x60d));
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.sp == stkp);
	CHECK(cpu.bus.readRam16(stkp + stkoffset + 1) == 0x608);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.pc == 0x60f);
	CHECK(cpu.A == 2);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.bus.readRam8(cpu.pc) == 0x85);
	cpu.executeIns();
	cycles += 3;
	CHECK(cpu.pc == 0x611);
	CHECK(cpu.A == 2);
	CHECK(cpu.bus.readRam8(0x610) == 2);
	CHECK(cpu.bus.readRam8(cpu.bus.readRam8(0x610)) == 2);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.pc == 0x613);
	CHECK(cpu.A == 4);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 3;
	CHECK(cpu.pc == 0x615);
	CHECK(cpu.A == 4);
	CHECK(cpu.bus.readRam8(3) == cpu.A);
	// NEX SEVERAL LINES Just load A into memory so I'm just writing the values manually here

	while (cpu.pc < 0x629) {
		cpu.executeIns();
	}
	cycles += 26;
	uint8_t valsToWrite[0x5] = {0x11, 0, 0x10, 0, 0xf};
	for (int i = 0x10; i < 0x15; i+=2) {
		/*cpu.bus.writeRam8(i, valsToWrite1[i - 0x10]);
		cpu.bus.writeRam8(i + 1, cpu.A);*/
		if (i & 1)
			CHECK(cpu.bus.readRam8(i) == 0x4);
		else
			CHECK(cpu.bus.readRam8(i) == valsToWrite[i - 0x10]);
	}
	//move pc to 0x629
	CHECK(cpu.pc == 0x629);
	CHECK(cpu.A == 0x4);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 6;
	stkp++;
	CHECK(cpu.pc == cpu.bus.readRam16(stkp + stkoffset) + 1);
	CHECK(cpu.pc == 0x609);
	stkp++;
	CHECK(cpu.sp == stkp);
	cpu.executeIns();
	cycles += 6;
	stkp -= 2;
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.sp == stkp);
	CHECK(cpu.pc == 0x62a);
	// Pushed previous pc + 2
	CHECK(cpu.bus.readRam16(stkp + 1 + stkoffset) == 0x60b);
	cpu.executeIns();
	cycles += 3;
	CHECK(cpu.A == 0);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.pc == 0x62c);
	cpu.executeIns();
	cpu.executeIns();
	cycles += 6;
	CHECK(cpu.A == 0);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.pc == 0x630);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.A == 0);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.cyclecount == cycles);
	// Check status: zero flag is set as we did an AND operation on 0 in the previous instruction
	CHECK(cpu.S == 0b00100010);
	CHECK(cpu.pc == 0x633);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.A == 2);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.S == 0b00100000);
	CHECK(cpu.pc == 0x635);
	cpu.executeIns();
	cycles += 3;
	CHECK(cpu.A == 2);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.bus.readRam8(0x636) == 1);
	CHECK(cpu.bus.readRam8(1) == cpu.A);
	CHECK(cpu.pc == 0x637);
	cpu.executeIns();
	cycles += 6;
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.pc == cpu.bus.readRam16(++stkp + stkoffset) + 1);
	stkp++;
	cpu.executeIns();
	cycles += 6;
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.pc == cpu.bus.readRam16(++stkp + stkoffset) + 1);
	stkp++;
	cpu.executeIns();
	cycles += 6;
	stkp -= 2;
	CHECK(cpu.pc == 0x638);
	CHECK(cpu.bus.readRam16(stkp + 1 + stkoffset) == 0x605);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 6;
	stkp -= 2;
	CHECK(cpu.pc == 0x64d);
	CHECK(cpu.bus.readRam16(stkp + 1 + stkoffset) == 0x63a);
	CHECK(cpu.cyclecount == cycles);
	cpu.executeIns();
	cycles += 3;
	CHECK(cpu.pc == 0x64f);
	CHECK(cpu.cyclecount == cycles);
	CHECK(cpu.A == 0);
	CHECK(cpu.S == 0b00100010);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.pc == 0x651);
	CHECK(cpu.A == 0);
	CHECK(cpu.cyclecount == cycles);
	// 0 - 77 < 0
	CHECK(cpu.S == 0b10100000);
	cpu.executeIns();
	cycles += 2;
	CHECK(cpu.pc == 0x653);
	CHECK(cpu.cyclecount == cycles);
}
